/*
 * Titan API
 * API used by the Titan CLI
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.titandata.client;

import io.titandata.client.ApiCallback;
import io.titandata.client.ApiClient;
import io.titandata.client.ApiException;
import io.titandata.client.ApiResponse;
import io.titandata.client.Configuration;
import io.titandata.client.Pair;
import io.titandata.client.ProgressRequestBody;
import io.titandata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.Remote;
import org.openapitools.client.model.RemoteParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemotesApi {
    private ApiClient localVarApiClient;

    public RemotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRemote
     * @param repositoryName Name of the repository (required)
     * @param remote Remote to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRemoteCall(String repositoryName, Remote remote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = remote;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRemoteValidateBeforeCall(String repositoryName, Remote remote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling createRemote(Async)");
        }
        
        // verify the required parameter 'remote' is set
        if (remote == null) {
            throw new ApiException("Missing the required parameter 'remote' when calling createRemote(Async)");
        }
        

        okhttp3.Call localVarCall = createRemoteCall(repositoryName, remote, _callback);
        return localVarCall;

    }

    /**
     * Create new remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remote Remote to create (required)
     * @return Remote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Remote createRemote(String repositoryName, Remote remote) throws ApiException {
        ApiResponse<Remote> localVarResp = createRemoteWithHttpInfo(repositoryName, remote);
        return localVarResp.getData();
    }

    /**
     * Create new remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remote Remote to create (required)
     * @return ApiResponse&lt;Remote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remote> createRemoteWithHttpInfo(String repositoryName, Remote remote) throws ApiException {
        okhttp3.Call localVarCall = createRemoteValidateBeforeCall(repositoryName, remote, null);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new remote (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remote Remote to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRemoteAsync(String repositoryName, Remote remote, final ApiCallback<Remote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRemoteValidateBeforeCall(repositoryName, remote, _callback);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRemote
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remote deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteCall(String repositoryName, String remoteName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRemoteValidateBeforeCall(String repositoryName, String remoteName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling deleteRemote(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling deleteRemote(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRemoteCall(repositoryName, remoteName, _callback);
        return localVarCall;

    }

    /**
     * Delete remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remote deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRemote(String repositoryName, String remoteName) throws ApiException {
        deleteRemoteWithHttpInfo(repositoryName, remoteName);
    }

    /**
     * Delete remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remote deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRemoteWithHttpInfo(String repositoryName, String remoteName) throws ApiException {
        okhttp3.Call localVarCall = deleteRemoteValidateBeforeCall(repositoryName, remoteName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete remote (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remote deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteAsync(String repositoryName, String remoteName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRemoteValidateBeforeCall(repositoryName, remoteName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRemote
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteCall(String repositoryName, String remoteName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemoteValidateBeforeCall(String repositoryName, String remoteName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getRemote(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling getRemote(Async)");
        }
        

        okhttp3.Call localVarCall = getRemoteCall(repositoryName, remoteName, _callback);
        return localVarCall;

    }

    /**
     * Get information about a particular remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @return Remote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Remote getRemote(String repositoryName, String remoteName) throws ApiException {
        ApiResponse<Remote> localVarResp = getRemoteWithHttpInfo(repositoryName, remoteName);
        return localVarResp.getData();
    }

    /**
     * Get information about a particular remote
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @return ApiResponse&lt;Remote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remote> getRemoteWithHttpInfo(String repositoryName, String remoteName) throws ApiException {
        okhttp3.Call localVarCall = getRemoteValidateBeforeCall(repositoryName, remoteName, null);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a particular remote (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteAsync(String repositoryName, String remoteName, final ApiCallback<Remote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemoteValidateBeforeCall(repositoryName, remoteName, _callback);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRemoteCommit
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteCommitCall(String repositoryName, String remoteName, String commitId, RemoteParameters titanRemoteParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}/commits/{commitId}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (titanRemoteParameters != null) {
            localVarHeaderParams.put("titan-remote-parameters", localVarApiClient.parameterToString(titanRemoteParameters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemoteCommitValidateBeforeCall(String repositoryName, String remoteName, String commitId, RemoteParameters titanRemoteParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getRemoteCommit(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling getRemoteCommit(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling getRemoteCommit(Async)");
        }
        
        // verify the required parameter 'titanRemoteParameters' is set
        if (titanRemoteParameters == null) {
            throw new ApiException("Missing the required parameter 'titanRemoteParameters' when calling getRemoteCommit(Async)");
        }
        

        okhttp3.Call localVarCall = getRemoteCommitCall(repositoryName, remoteName, commitId, titanRemoteParameters, _callback);
        return localVarCall;

    }

    /**
     * Get a remote commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Commit getRemoteCommit(String repositoryName, String remoteName, String commitId, RemoteParameters titanRemoteParameters) throws ApiException {
        ApiResponse<Commit> localVarResp = getRemoteCommitWithHttpInfo(repositoryName, remoteName, commitId, titanRemoteParameters);
        return localVarResp.getData();
    }

    /**
     * Get a remote commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commit> getRemoteCommitWithHttpInfo(String repositoryName, String remoteName, String commitId, RemoteParameters titanRemoteParameters) throws ApiException {
        okhttp3.Call localVarCall = getRemoteCommitValidateBeforeCall(repositoryName, remoteName, commitId, titanRemoteParameters, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a remote commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteCommitAsync(String repositoryName, String remoteName, String commitId, RemoteParameters titanRemoteParameters, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemoteCommitValidateBeforeCall(repositoryName, remoteName, commitId, titanRemoteParameters, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRemoteCommits
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRemoteCommitsCall(String repositoryName, String remoteName, RemoteParameters titanRemoteParameters, List<String> tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}/commits"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (titanRemoteParameters != null) {
            localVarHeaderParams.put("titan-remote-parameters", localVarApiClient.parameterToString(titanRemoteParameters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRemoteCommitsValidateBeforeCall(String repositoryName, String remoteName, RemoteParameters titanRemoteParameters, List<String> tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling listRemoteCommits(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling listRemoteCommits(Async)");
        }
        
        // verify the required parameter 'titanRemoteParameters' is set
        if (titanRemoteParameters == null) {
            throw new ApiException("Missing the required parameter 'titanRemoteParameters' when calling listRemoteCommits(Async)");
        }
        

        okhttp3.Call localVarCall = listRemoteCommitsCall(repositoryName, remoteName, titanRemoteParameters, tag, _callback);
        return localVarCall;

    }

    /**
     * List remote commits
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<Commit> listRemoteCommits(String repositoryName, String remoteName, RemoteParameters titanRemoteParameters, List<String> tag) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = listRemoteCommitsWithHttpInfo(repositoryName, remoteName, titanRemoteParameters, tag);
        return localVarResp.getData();
    }

    /**
     * List remote commits
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Commit>> listRemoteCommitsWithHttpInfo(String repositoryName, String remoteName, RemoteParameters titanRemoteParameters, List<String> tag) throws ApiException {
        okhttp3.Call localVarCall = listRemoteCommitsValidateBeforeCall(repositoryName, remoteName, titanRemoteParameters, tag, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List remote commits (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param titanRemoteParameters Remote-specific parameters (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRemoteCommitsAsync(String repositoryName, String remoteName, RemoteParameters titanRemoteParameters, List<String> tag, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRemoteCommitsValidateBeforeCall(repositoryName, remoteName, titanRemoteParameters, tag, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRemotes
     * @param repositoryName Name of the repository (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of remotes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRemotesCall(String repositoryName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRemotesValidateBeforeCall(String repositoryName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling listRemotes(Async)");
        }
        

        okhttp3.Call localVarCall = listRemotesCall(repositoryName, _callback);
        return localVarCall;

    }

    /**
     * Get list of remotes
     * 
     * @param repositoryName Name of the repository (required)
     * @return List&lt;Remote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of remotes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<Remote> listRemotes(String repositoryName) throws ApiException {
        ApiResponse<List<Remote>> localVarResp = listRemotesWithHttpInfo(repositoryName);
        return localVarResp.getData();
    }

    /**
     * Get list of remotes
     * 
     * @param repositoryName Name of the repository (required)
     * @return ApiResponse&lt;List&lt;Remote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of remotes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Remote>> listRemotesWithHttpInfo(String repositoryName) throws ApiException {
        okhttp3.Call localVarCall = listRemotesValidateBeforeCall(repositoryName, null);
        Type localVarReturnType = new TypeToken<List<Remote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of remotes (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of remotes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRemotesAsync(String repositoryName, final ApiCallback<List<Remote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRemotesValidateBeforeCall(repositoryName, _callback);
        Type localVarReturnType = new TypeToken<List<Remote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRemote
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param remote Remote information to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRemoteCall(String repositoryName, String remoteName, Remote remote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = remote;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRemoteValidateBeforeCall(String repositoryName, String remoteName, Remote remote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling updateRemote(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling updateRemote(Async)");
        }
        
        // verify the required parameter 'remote' is set
        if (remote == null) {
            throw new ApiException("Missing the required parameter 'remote' when calling updateRemote(Async)");
        }
        

        okhttp3.Call localVarCall = updateRemoteCall(repositoryName, remoteName, remote, _callback);
        return localVarCall;

    }

    /**
     * Update remote information
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param remote Remote information to update (required)
     * @return Remote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Remote updateRemote(String repositoryName, String remoteName, Remote remote) throws ApiException {
        ApiResponse<Remote> localVarResp = updateRemoteWithHttpInfo(repositoryName, remoteName, remote);
        return localVarResp.getData();
    }

    /**
     * Update remote information
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param remote Remote information to update (required)
     * @return ApiResponse&lt;Remote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remote> updateRemoteWithHttpInfo(String repositoryName, String remoteName, Remote remote) throws ApiException {
        okhttp3.Call localVarCall = updateRemoteValidateBeforeCall(repositoryName, remoteName, remote, null);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update remote information (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param remote Remote information to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remote information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRemoteAsync(String repositoryName, String remoteName, Remote remote, final ApiCallback<Remote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRemoteValidateBeforeCall(repositoryName, remoteName, remote, _callback);
        Type localVarReturnType = new TypeToken<Remote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
