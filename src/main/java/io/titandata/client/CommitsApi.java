/*
 * Titan API
 * API used by the Titan CLI
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.titandata.client;

import io.titandata.client.ApiCallback;
import io.titandata.client.ApiClient;
import io.titandata.client.ApiException;
import io.titandata.client.ApiResponse;
import io.titandata.client.Configuration;
import io.titandata.client.Pair;
import io.titandata.client.ProgressRequestBody;
import io.titandata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.CommitStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommitsApi {
    private ApiClient localVarApiClient;

    public CommitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for checkoutCommit
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit checked out </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkoutCommitCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits/{commitId}/checkout"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkoutCommitValidateBeforeCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling checkoutCommit(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling checkoutCommit(Async)");
        }
        

        okhttp3.Call localVarCall = checkoutCommitCall(repositoryName, commitId, _callback);
        return localVarCall;

    }

    /**
     * Checkout the given commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit checked out </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void checkoutCommit(String repositoryName, String commitId) throws ApiException {
        checkoutCommitWithHttpInfo(repositoryName, commitId);
    }

    /**
     * Checkout the given commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit checked out </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkoutCommitWithHttpInfo(String repositoryName, String commitId) throws ApiException {
        okhttp3.Call localVarCall = checkoutCommitValidateBeforeCall(repositoryName, commitId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checkout the given commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit checked out </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkoutCommitAsync(String repositoryName, String commitId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkoutCommitValidateBeforeCall(repositoryName, commitId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommit
     * @param repositoryName Name of the repository (required)
     * @param commit New commit to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommitCall(String repositoryName, Commit commit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commit;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommitValidateBeforeCall(String repositoryName, Commit commit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling createCommit(Async)");
        }
        
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling createCommit(Async)");
        }
        

        okhttp3.Call localVarCall = createCommitCall(repositoryName, commit, _callback);
        return localVarCall;

    }

    /**
     * Create new commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commit New commit to create (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Commit createCommit(String repositoryName, Commit commit) throws ApiException {
        ApiResponse<Commit> localVarResp = createCommitWithHttpInfo(repositoryName, commit);
        return localVarResp.getData();
    }

    /**
     * Create new commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commit New commit to create (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commit> createCommitWithHttpInfo(String repositoryName, Commit commit) throws ApiException {
        okhttp3.Call localVarCall = createCommitValidateBeforeCall(repositoryName, commit, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commit New commit to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created commit </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommitAsync(String repositoryName, Commit commit, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommitValidateBeforeCall(repositoryName, commit, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCommit
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit discarded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommitCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits/{commitId}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommitValidateBeforeCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling deleteCommit(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling deleteCommit(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCommitCall(repositoryName, commitId, _callback);
        return localVarCall;

    }

    /**
     * Discard a past commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit discarded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCommit(String repositoryName, String commitId) throws ApiException {
        deleteCommitWithHttpInfo(repositoryName, commitId);
    }

    /**
     * Discard a past commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit discarded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommitWithHttpInfo(String repositoryName, String commitId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommitValidateBeforeCall(repositoryName, commitId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Discard a past commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Commit discarded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommitAsync(String repositoryName, String commitId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommitValidateBeforeCall(repositoryName, commitId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommit
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits/{commitId}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommitValidateBeforeCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getCommit(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling getCommit(Async)");
        }
        

        okhttp3.Call localVarCall = getCommitCall(repositoryName, commitId, _callback);
        return localVarCall;

    }

    /**
     * Get information for a specific commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Commit getCommit(String repositoryName, String commitId) throws ApiException {
        ApiResponse<Commit> localVarResp = getCommitWithHttpInfo(repositoryName, commitId);
        return localVarResp.getData();
    }

    /**
     * Get information for a specific commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commit> getCommitWithHttpInfo(String repositoryName, String commitId) throws ApiException {
        okhttp3.Call localVarCall = getCommitValidateBeforeCall(repositoryName, commitId, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information for a specific commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitAsync(String repositoryName, String commitId, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommitValidateBeforeCall(repositoryName, commitId, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommitStatus
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitStatusCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits/{commitId}/status"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommitStatusValidateBeforeCall(String repositoryName, String commitId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getCommitStatus(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling getCommitStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getCommitStatusCall(repositoryName, commitId, _callback);
        return localVarCall;

    }

    /**
     * Get commit status
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return CommitStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public CommitStatus getCommitStatus(String repositoryName, String commitId) throws ApiException {
        ApiResponse<CommitStatus> localVarResp = getCommitStatusWithHttpInfo(repositoryName, commitId);
        return localVarResp.getData();
    }

    /**
     * Get commit status
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @return ApiResponse&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitStatus> getCommitStatusWithHttpInfo(String repositoryName, String commitId) throws ApiException {
        okhttp3.Call localVarCall = getCommitStatusValidateBeforeCall(repositoryName, commitId, null);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commit status (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitStatusAsync(String repositoryName, String commitId, final ApiCallback<CommitStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommitStatusValidateBeforeCall(repositoryName, commitId, _callback);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCommits
     * @param repositoryName Name of the repository (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommitsCall(String repositoryName, List<String> tag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommitsValidateBeforeCall(String repositoryName, List<String> tag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling listCommits(Async)");
        }
        

        okhttp3.Call localVarCall = listCommitsCall(repositoryName, tag, _callback);
        return localVarCall;

    }

    /**
     * Get commit history for a repository
     * 
     * @param repositoryName Name of the repository (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<Commit> listCommits(String repositoryName, List<String> tag) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = listCommitsWithHttpInfo(repositoryName, tag);
        return localVarResp.getData();
    }

    /**
     * Get commit history for a repository
     * 
     * @param repositoryName Name of the repository (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Commit>> listCommitsWithHttpInfo(String repositoryName, List<String> tag) throws ApiException {
        okhttp3.Call localVarCall = listCommitsValidateBeforeCall(repositoryName, tag, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commit history for a repository (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param tag Tags (name or name&#x3D;value) to search for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of commits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommitsAsync(String repositoryName, List<String> tag, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommitsValidateBeforeCall(repositoryName, tag, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCommit
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param commit Commit contents to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommitCall(String repositoryName, String commitId, Commit commit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commit;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/commits/{commitId}"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommitValidateBeforeCall(String repositoryName, String commitId, Commit commit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling updateCommit(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling updateCommit(Async)");
        }
        
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling updateCommit(Async)");
        }
        

        okhttp3.Call localVarCall = updateCommitCall(repositoryName, commitId, commit, _callback);
        return localVarCall;

    }

    /**
     * Update tags for a previous commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param commit Commit contents to update (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Commit updateCommit(String repositoryName, String commitId, Commit commit) throws ApiException {
        ApiResponse<Commit> localVarResp = updateCommitWithHttpInfo(repositoryName, commitId, commit);
        return localVarResp.getData();
    }

    /**
     * Update tags for a previous commit
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param commit Commit contents to update (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commit> updateCommitWithHttpInfo(String repositoryName, String commitId, Commit commit) throws ApiException {
        okhttp3.Call localVarCall = updateCommitValidateBeforeCall(repositoryName, commitId, commit, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tags for a previous commit (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param commitId Commit identifier (required)
     * @param commit Commit contents to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated commit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommitAsync(String repositoryName, String commitId, Commit commit, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommitValidateBeforeCall(repositoryName, commitId, commit, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
