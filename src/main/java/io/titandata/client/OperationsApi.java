/*
 * Titan API
 * API used by the Titan CLI
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.titandata.client;

import io.titandata.client.ApiCallback;
import io.titandata.client.ApiClient;
import io.titandata.client.ApiException;
import io.titandata.client.ApiResponse;
import io.titandata.client.Configuration;
import io.titandata.client.Pair;
import io.titandata.client.ProgressRequestBody;
import io.titandata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ProgressEntry;
import org.openapitools.client.model.RemoteParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient localVarApiClient;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for abortOperation
     * @param operationId Operation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operation aborted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abortOperationCall(String operationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operations/{operationId}"
            .replaceAll("\\{" + "operationId" + "\\}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abortOperationValidateBeforeCall(String operationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling abortOperation(Async)");
        }
        

        okhttp3.Call localVarCall = abortOperationCall(operationId, _callback);
        return localVarCall;

    }

    /**
     * Abort operation
     * 
     * @param operationId Operation identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operation aborted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void abortOperation(String operationId) throws ApiException {
        abortOperationWithHttpInfo(operationId);
    }

    /**
     * Abort operation
     * 
     * @param operationId Operation identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operation aborted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abortOperationWithHttpInfo(String operationId) throws ApiException {
        okhttp3.Call localVarCall = abortOperationValidateBeforeCall(operationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abort operation (asynchronously)
     * 
     * @param operationId Operation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Operation aborted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abortOperationAsync(String operationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abortOperationValidateBeforeCall(operationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperation
     * @param operationId Operation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationCall(String operationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operations/{operationId}"
            .replaceAll("\\{" + "operationId" + "\\}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationValidateBeforeCall(String operationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling getOperation(Async)");
        }
        

        okhttp3.Call localVarCall = getOperationCall(operationId, _callback);
        return localVarCall;

    }

    /**
     * Get operation
     * 
     * @param operationId Operation identifier (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Operation getOperation(String operationId) throws ApiException {
        ApiResponse<Operation> localVarResp = getOperationWithHttpInfo(operationId);
        return localVarResp.getData();
    }

    /**
     * Get operation
     * 
     * @param operationId Operation identifier (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> getOperationWithHttpInfo(String operationId) throws ApiException {
        okhttp3.Call localVarCall = getOperationValidateBeforeCall(operationId, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get operation (asynchronously)
     * 
     * @param operationId Operation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationAsync(String operationId, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationValidateBeforeCall(operationId, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperationProgress
     * @param operationId Operation identifier (required)
     * @param lastId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationProgressCall(String operationId, Integer lastId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operations/{operationId}/progress"
            .replaceAll("\\{" + "operationId" + "\\}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastId", lastId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationProgressValidateBeforeCall(String operationId, Integer lastId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling getOperationProgress(Async)");
        }
        

        okhttp3.Call localVarCall = getOperationProgressCall(operationId, lastId, _callback);
        return localVarCall;

    }

    /**
     * Get operation progress
     * 
     * @param operationId Operation identifier (required)
     * @param lastId  (optional)
     * @return List&lt;ProgressEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<ProgressEntry> getOperationProgress(String operationId, Integer lastId) throws ApiException {
        ApiResponse<List<ProgressEntry>> localVarResp = getOperationProgressWithHttpInfo(operationId, lastId);
        return localVarResp.getData();
    }

    /**
     * Get operation progress
     * 
     * @param operationId Operation identifier (required)
     * @param lastId  (optional)
     * @return ApiResponse&lt;List&lt;ProgressEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProgressEntry>> getOperationProgressWithHttpInfo(String operationId, Integer lastId) throws ApiException {
        okhttp3.Call localVarCall = getOperationProgressValidateBeforeCall(operationId, lastId, null);
        Type localVarReturnType = new TypeToken<List<ProgressEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get operation progress (asynchronously)
     * 
     * @param operationId Operation identifier (required)
     * @param lastId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationProgressAsync(String operationId, Integer lastId, final ApiCallback<List<ProgressEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationProgressValidateBeforeCall(operationId, lastId, _callback);
        Type localVarReturnType = new TypeToken<List<ProgressEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOperations
     * @param repository Limit to the given repository (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsCall(String repository, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (repository != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository", repository));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOperationsValidateBeforeCall(String repository, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listOperationsCall(repository, _callback);
        return localVarCall;

    }

    /**
     * List operations
     * 
     * @param repository Limit to the given repository (optional)
     * @return List&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<Operation> listOperations(String repository) throws ApiException {
        ApiResponse<List<Operation>> localVarResp = listOperationsWithHttpInfo(repository);
        return localVarResp.getData();
    }

    /**
     * List operations
     * 
     * @param repository Limit to the given repository (optional)
     * @return ApiResponse&lt;List&lt;Operation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Operation>> listOperationsWithHttpInfo(String repository) throws ApiException {
        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(repository, null);
        Type localVarReturnType = new TypeToken<List<Operation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List operations (asynchronously)
     * 
     * @param repository Limit to the given repository (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsAsync(String repository, final ApiCallback<List<Operation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(repository, _callback);
        Type localVarReturnType = new TypeToken<List<Operation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pull
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pullCall(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = remoteParameters;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}/commits/{commitId}/pull"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadataOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadataOnly", metadataOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullValidateBeforeCall(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling pull(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling pull(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling pull(Async)");
        }
        
        // verify the required parameter 'remoteParameters' is set
        if (remoteParameters == null) {
            throw new ApiException("Missing the required parameter 'remoteParameters' when calling pull(Async)");
        }
        

        okhttp3.Call localVarCall = pullCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, _callback);
        return localVarCall;

    }

    /**
     * Start a pull operation
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Operation pull(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly) throws ApiException {
        ApiResponse<Operation> localVarResp = pullWithHttpInfo(repositoryName, remoteName, commitId, remoteParameters, metadataOnly);
        return localVarResp.getData();
    }

    /**
     * Start a pull operation
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> pullWithHttpInfo(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly) throws ApiException {
        okhttp3.Call localVarCall = pullValidateBeforeCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a pull operation (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pullAsync(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullValidateBeforeCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for push
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushCall(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = remoteParameters;

        // create path and map variables
        String localVarPath = "/v1/repositories/{repositoryName}/remotes/{remoteName}/commits/{commitId}/push"
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "remoteName" + "\\}", localVarApiClient.escapeString(remoteName.toString()))
            .replaceAll("\\{" + "commitId" + "\\}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadataOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadataOnly", metadataOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushValidateBeforeCall(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling push(Async)");
        }
        
        // verify the required parameter 'remoteName' is set
        if (remoteName == null) {
            throw new ApiException("Missing the required parameter 'remoteName' when calling push(Async)");
        }
        
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling push(Async)");
        }
        
        // verify the required parameter 'remoteParameters' is set
        if (remoteParameters == null) {
            throw new ApiException("Missing the required parameter 'remoteParameters' when calling push(Async)");
        }
        

        okhttp3.Call localVarCall = pushCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, _callback);
        return localVarCall;

    }

    /**
     * Start a push operation
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Operation push(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly) throws ApiException {
        ApiResponse<Operation> localVarResp = pushWithHttpInfo(repositoryName, remoteName, commitId, remoteParameters, metadataOnly);
        return localVarResp.getData();
    }

    /**
     * Start a push operation
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> pushWithHttpInfo(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly) throws ApiException {
        okhttp3.Call localVarCall = pushValidateBeforeCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a push operation (asynchronously)
     * 
     * @param repositoryName Name of the repository (required)
     * @param remoteName Name of the remote (required)
     * @param commitId Commit identifier (required)
     * @param remoteParameters Provider specific parameters (required)
     * @param metadataOnly Transfer only tag metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Malformed user input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushAsync(String repositoryName, String remoteName, String commitId, RemoteParameters remoteParameters, Boolean metadataOnly, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushValidateBeforeCall(repositoryName, remoteName, commitId, remoteParameters, metadataOnly, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
